MAPA = {}

def main():
    """

    Includes user interfase.
    """
    # User input
    colour_list= {"BLANCO":"255 255 255","NEGRO":"0 0 0","MAGENTA":"255 0 255","AMARILLO":"255 255 0","ROJO":"255 0 0","VERDE":"0 255 0","AZUL": "0 0 255"}
    final_name = input ("nombre?")
    while True:
        size_x = input("Ingrese el tamaño en x: ")
        if size_x.isdigit():
            size_x = int(size_x)
            break
    while True:
        size_y = input("Ingrese el tamaño en y: ")
        if size_y.isdigit():
            size_y = int(size_y)
            break
    aux = 0
    while True:
        aux += 1
        while True:
            coor_x = input("Ingrese la coordenada x del monticulo {}: ".format(aux))
            if coor_x.isdigit():
                coor_x = int(coor_x)
                break
        while True:
            coor_y = input("Ingrese la coordenada y del monticulo {}: ".format(aux))
            if coor_y.isdigit():
                coor_y = int(coor_y)
                break
        while True:
            quantity = input("Ingrese la cantidad de arena del monticulo {}: ".format(aux))
            if quantity.isdigit():
                quantity = int(quantity)
                break
        MAPA[(coor_x,coor_y)] = quantity
        more = input("¿Desea ingresar otro monticulo? (S/N): ")
        if not more.upper() == "S":
            break
    config = input("Desea personalizar los parametros? (S/N): ")
    vertical = 1
    horizontal = 1
    vertical_mirror = 0
    horizontal_mirror = 0
    colours = []
    if config.upper() == "S":
        while True:
            vertical = input("Tamano de celda vertical: ")
            if vertical.isdigit():
                vertical = int(vertical)
                break
        while True:
            horizontal = input("Tamano de celda horizontal: ")
            if horizontal.isdigit():
                horizontal = int(horizontal)
                break
        while True:
            vertical_mirror = input("Espejado vertical: ")
            if vertical_mirror.isdigit():
                vertical_mirror = int(vertical_mirror)
                break
        while True:
            horizontal_mirror = input("Espejado horizontal: ")
            if horizontal_mirror.isdigit():
                horizontal_mirror = int(horizontal_mirror)
                break
        conf_colour = input("Desea personalizar los colores? (S/N): ")
        if conf_colour.upper() == "S":
            print("Colores disponibles:")
            print(colour_list.keys())
            for n in (0,1,2,3):
                while True:
                    selected = input("Escriba el color que representa el {}:".format(n))
                    if selected.upper() in colour_list:
                        colours.append(colour_list[selected.upper()])
                        break
                    print("Por favor, escriba un color de la lista")
        else:
            colours = ["0 0 0","255 0 255","255 0 0","255 255 0"]
    # Generate the map
    while True:
        repeat = topple(MAPA,size_x,size_y)
        if not repeat:
            break
    file_content = generate_head(size_x,size_y,horizontal,vertical)
    file_content += generate_body(MAPA,colours,size_x,size_y,horizontal,vertical)
    write(final_name,file_content)
    return

def topple(dicc,size_x,size_y):
    """
    Topple a coordinate map using sandpiles method. Receives a map and update the global variable that cointain it.
    Params:
        dicc (dictionary) Contains coordinate map to topple
        size_x (int) Size of x coordinates
        size_y (int) Size of y coordinates
    Return:
        bool: True if there is a field with more than 3 sands. False otherwise.
    """
    need_to_repeat = False
    for key in list(dicc.keys()):
        if dicc[key] > 3:
            value = dicc[key] // 4
            MAPA[key] = dicc[key] % 4 # Update current field
            left = (key[0]-1,key[1])
            right = (key[0]+1,key[1])
            up = (key[0],key[1]-1)
            down = (key[0],key[1]+1)
            for coor in (left,right,up,down):
                # Not need for coordinates outside the limits
                if coor[0] >= 0 and coor[1] >= 0 and coor[0] <= size_x and coor[1] <= size_y:
                    old = MAPA.get(coor,0)
                    MAPA[coor] = old + value # Add the new value
                    if (old + value) > 3:
                        need_to_repeat = True
    return need_to_repeat

def generate_body(dicc,colours,size_x,size_y,horizontal,vertical):
    """
    Generate the body text to add in a ppm file.
    Params:
        dicc (dictionary) Contains coordinate map to transform
        colours (list) Contains four colours, correspond to 0,1,2 and 3 respectively
        size_x (int) Size of x coordinates
        size_y (int) Size of y coordinates
        horizontal (int) Pixels for each x coordinate
        vertical (int) Pixels for each y coordinate
    Return:
        string: Text of the body
    """
    text = ""
    if not len(colours) == 4:
        return False
    for y in range(0,size_y):
        for pixels in range(0,vertical):
            for x in range(0,size_x):
                text += (str(colours[dicc.get((x,y),0)])+"\n" * horizontal)
    return text

def generate_head(size_x,size_y,horizontal,vertical):
    """
    Generate the head text to add in a ppm file.
    Params:
        size_x (int) Size of x coordinates
        size_y (int) Size of y coordinates
        horizontal (int) Pixels for each x coordinate
        vertical (int) Pixels for each y coordinate
    Return:
        string: Text of the head
    """
    return "P3\n"+str(size_x*horizontal)+" "+str(size_y*vertical)+"\n"+"255\n"

def write(name,content):
    final_name = name + ".ppm"
    with open(final_name,"w") as f:
        f.write(content)
        return True
    return False

main()
